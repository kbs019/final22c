package com.ex.final22c.service.chat;

import com.ex.final22c.sql.SqlGuard;
import com.ex.final22c.sql.SqlNormalizer;
import com.ex.final22c.sql.PeriodResolver;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;

import java.sql.Timestamp;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
@Slf4j
public class ChatService {

    private final WebClient aiWebClient;

    public ChatService(@Qualifier("aiWebClient") WebClient aiWebClient) {
        this.aiWebClient = aiWebClient;
    }

    @Value("${deepseek.api.model:deepseek-chat}")
    private String model;

    @Value("${deepseek.api.path:/chat/completions}")
    private String path;

    private final ObjectMapper om = new ObjectMapper()
        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

    @PersistenceContext
    private EntityManager em;

    /* -------------------- Í≥µÌÜµ Ìò∏Ï∂ú -------------------- */
    private Map call(Map<String, Object> body) {
        try {
            return aiWebClient.post().uri(path)
                .header("Content-Type", "application/json")
                .bodyValue(body)
                .retrieve()
                .onStatus(s -> s.value() >= 400, r -> r.bodyToMono(String.class)
                    .map(msg -> new RuntimeException("DeepSeek HTTP " + r.statusCode() + ": " + msg)))
                .bodyToMono(Map.class)
                .block();
        } catch (Exception e) {
            log.error("[AI CALL FAIL] {}", e.toString(), e);
            return Map.of("error", e.getMessage());
        }
    }

    public String ask(String userMsg) {
        var body = Map.of(
            "model", model,
            "messages", List.of(
                Map.of("role", "system", "content", "Í∞ÑÍ≤∞ÌïòÍ≤å ÌïúÍµ≠Ïñ¥Î°ú ÎãµÌïòÏÑ∏Ïöî."),
                Map.of("role", "user", "content", userMsg)
            ),
            "temperature", 0.3
        );
        var resp = call(body);
        return extract(resp);
    }

    /* -------------------- Ï∞®Ìä∏ Ïä§Ìéô ÏÉùÏÑ± -------------------- */
    public ChartSpec generateChartSpec(String userMsg, String schemaDoc) {
        String system = """
            ÎÑàÎäî Oracle SQLÍ≥º Îç∞Ïù¥ÌÑ∞ÏãúÍ∞ÅÌôî Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏Îã§.
            ÏÇ¨Ïö©ÏûêÍ∞Ä ÏöîÍµ¨ÌïòÎäî "Ï∞®Ìä∏"Î•º Í∑∏Î¶¥ Ïàò ÏûàÎèÑÎ°ù ÏïÑÎûò ÌòïÏãùÏùò JSONÎßå Ï∂úÎ†•Ìï¥Îùº.
            Îã§Î•∏ ÌÖçÏä§Ìä∏/ÏÑ§Î™Ö/ÎßàÌÅ¨Îã§Ïö¥ Í∏àÏßÄ. Ïò§ÏßÅ ÌïòÎÇòÏùò JSON Ïò§Î∏åÏ†ùÌä∏Îßå.

            Ï∂úÎ†• JSON Ïä§ÌÇ§Îßà:
            {
              "sql": "SELECT ...",           // ÌïÑÏàò. Í≤∞Í≥º Ïª¨ÎüºÏóê label, value, (optional) quantity Î≥ÑÏπ≠ ÌïÑÏöî
              "title": "Ï∞®Ìä∏ Ï†úÎ™©",           // ÏÑ†ÌÉù
              "valueColLabel": "yÏ∂ï ÎùºÎ≤®",    // ÏÑ†ÌÉù
              "topN": 5,                     // ÏÑ†ÌÉù. ÏóÜÏúºÎ©¥ 5
              "type": "bar",                 // ÏÑ†ÌÉù: bar | line | pie | doughnut
              "format": "currency"           // ÏÑ†ÌÉù: currency | count | percent
            }

            Ï†úÏïΩ/ÎπÑÏ¶àÎãàÏä§ Í∑úÏπô:
            - ÌåêÎß§ÏàòÎüâ = SUM(ORDERDETAIL.CONFIRMQUANTITY)
            - Îß§Ï∂ú     = SUM(ORDERDETAIL.CONFIRMQUANTITY * ORDERDETAIL.SELLPRICE)
            - ÏßëÍ≥Ñ ÎåÄÏÉÅ Ï£ºÎ¨∏ = ORDERS.STATUS IN ('PAID','CONFIRMED','REFUNDED')
            - PAYMENT ÌÖåÏù¥Î∏îÏùÄ Îß§Ï∂ú/ÌåêÎß§Îüâ Í≥ÑÏÇ∞Ïóê ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏùå
            - Ï†úÌíàÎ≥Ñ ÏßëÍ≥ÑÎäî ORDERDETAIL.ID = PRODUCT.ID Î°ú Ï°∞Ïù∏
            - ORDER BY value DESC Ìè¨Ìï®
            - :limit ÎÑ§ÏûÑÎìú ÌååÎùºÎØ∏ÌÑ∞ ÏÇ¨Ïö© Í∞ÄÎä•. ÏÑ∏ÎØ∏ÏΩúÎ°† Í∏àÏßÄ.
            - ÏúÑÏπò Î∞îÏù∏Îìú(?, :1 Îì±) Í∏àÏßÄ. ÎÑ§ÏûÑÎìú Î∞îÏù∏ÎìúÎßå ÏÇ¨Ïö©.

            üîí ÎÇ†Ïßú Í∑úÏπô:
            - WHEREÏóêÏÑúÎäî ÎÇ†Ïßú Ïª¨ÎüºÏóê Ìï®Ïàò Í∏àÏßÄ(EXTRACT/TRUNC Í∏àÏßÄ)
            - WHERE ÎÇ†Ïßú ÌïÑÌÑ∞Îäî REGDATE >= :start AND REGDATE < :end
            - Ïõî/Ï£º/Ïùº Î≤ÑÌÇ∑ÌåÖÏùÄ SELECT/GROUP BYÏóêÏÑúÎßå TRUNC(o.REGDATE,'MM'|'IW'|'DD') ÏÇ¨Ïö©
            """;

        String user = """
            [ÏÇ¨Ïö©Ïûê ÏöîÏ≤≠]
            %s

            [Ïä§ÌÇ§Îßà/Í∑úÏπô]
            %s

            ÏúÑ ÌòïÏãùÏùò JSONÎßå ÏàúÏàò ÌÖçÏä§Ìä∏Î°ú Ï∂úÎ†•Ìï¥Îùº. ÏΩîÎìúÎ∏îÎ°ù, ÏÑ§Î™Ö, Ï†ëÎëê/Ï†ëÎØ∏ Î¨∏Íµ¨ Í∏àÏßÄ.
            """.formatted(userMsg, schemaDoc);

        var body = Map.of(
            "model", model,
            "messages", List.of(
                Map.of("role", "system", "content", system),
                Map.of("role", "user", "content", user)
            ),
            "temperature", 0.1
        );

        var resp = call(body);
        String raw = extract(resp);
        String json = stripCodeFence(raw);

        try {
            ChartSpec spec = om.readValue(json, ChartSpec.class);
            if (spec.sql() == null || spec.sql().isBlank()) throw new IllegalArgumentException("sql ÎπÑÏñ¥ÏûàÏùå");
            return spec;
        } catch (Exception e) {
            throw new RuntimeException("ChartSpec JSON ÌååÏã± Ïã§Ìå®: " + e.getMessage() + " / raw=" + raw);
        }
    }

    public String generateSql(String question, String schemaDoc) {
        var sys = """
            ÎÑàÎäî Oracle SQL ÏÉùÏÑ±Í∏∞Îã§.
            - Îã®Ïùº SELECT Ìïú Í∞úÎßå. ÏÑ∏ÎØ∏ÏΩúÎ°† Í∏àÏßÄ. DML/DDL Í∏àÏßÄ.
            - ÌóàÏö© ÌÖåÏù¥Î∏îÎßå ÏÇ¨Ïö©: USERS, ORDERS, ORDERDETAIL, PAYMENT, PRODUCT, BRAND, GRADE, MAINNOTE, VOLUME, REFUND, REFUNDDETAIL, CART, CARTDETAIL, REVIEW, PURCHASE, PURCHASEDETAIL.
            - ÌÖçÏä§Ìä∏ ÎπÑÍµêÎäî ÎåÄÏÜåÎ¨∏Ïûê Î¨¥Ïãú(UPPER(...) = UPPER(:v)).
            - ÏÑ±Î≥Ñ ÎèôÏùòÏñ¥Îäî 'M'/'F'Î°ú Ï†ïÍ∑úÌôî ÏòàÏãú Ìè¨Ìï®.
            - ÏúÑÏπòÎ∞îÏù∏Îìú(?, :1 Îì±) Í∏àÏßÄ. ÎÑ§ÏûÑÎìú Î∞îÏù∏ÎìúÎßå ÏÇ¨Ïö©.

            üîí ÎÇ†Ïßú/ÏßëÍ≥Ñ Í∑úÏπô:
            - WHERE Ï†àÏóêÎäî ÎÇ†Ïßú Ìï®Ïàò(EXTRACT/TRUNC/TO_DATE Îì±) Í∏àÏßÄ.
            - WHERE ÎÇ†Ïßú ÌïÑÌÑ∞Îäî ÏïÑÎûò Îëê Ï§ÑÎßå Ìè¨Ìï®:
                AND o.REGDATE >= :start
                AND o.REGDATE <  :end
            - USERS.REG ÎÇ†Ïßú ÎπÑÍµêÎäî Î∞òÎìúÏãú ÌååÎùºÎØ∏ÌÑ∞ ÏÇ¨Ïö©: WHERE REG >= :start AND REG < :end
            - Oracle ÎÇ†Ïßú Ìï®Ïàò(SYSDATE, TRUNC, ADD_MONTHS) ÏÇ¨Ïö© Í∏àÏßÄ
            - Î≤ÑÌÇ∑ÌåÖ(TRUNC)ÏùÄ SELECT/GROUP BYÏóêÏÑúÎßå ÏÇ¨Ïö©.
            - ÏÉÅÌÉú ÌïÑÌÑ∞:
                o.STATUS IN ('PAID','CONFIRMED','REFUNDED')
            - PAYMENTÎäî Îß§Ï∂ú/ÌåêÎß§Îüâ Í≥ÑÏÇ∞Ïóê ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏùå.
            - Ï†úÌíàÎ≥Ñ ÏßëÍ≥ÑÎäî ORDERDETAIL.ID = PRODUCT.ID Î°ú Ï°∞Ïù∏.
            Í≤∞Í≥ºÎäî Î∞òÎìúÏãú ```sql ... ``` ÏΩîÎìúÎ∏îÎ°ù ÌïòÎÇòÎ°úÎßå Ï∂úÎ†•.
            """;

        var user = "Ïä§ÌÇ§Îßà ÏöîÏïΩ:\n" + schemaDoc + "\n\nÏßàÎ¨∏:\n" + question + "\n\nÎ∞òÎìúÏãú ÏΩîÎìúÎ∏îÎ°ùÏúºÎ°ú SQLÎßå Ï∂úÎ†•.";
        var body = Map.of(
            "model", model,
            "messages", List.of(
                Map.of("role", "system", "content", sys),
                Map.of("role", "user", "content", user)
            ),
            "temperature", 0.1
        );
        var resp = call(body);
        return extract(resp);
    }

    // Í¥ÄÎ¶¨ÏûêÌéòÏù¥ÏßÄ AI
    public String summarize(String question, String sql, String table) {
        var body = Map.of(
            "model", model,
            "messages", List.of(
                Map.of("role", "system", "content",
                    "ÎÑàÎäî Îß§Ïû• Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù ÎèÑÏö∞ÎØ∏Ïïº. Í≤∞Í≥ºÎ•º Ìïú Ï§ÑÎ°ú ÏïÑÏ£º Í∞ÑÎã®Ìûà, ÏπúÍ∑ºÌïú Ï°¥ÎåìÎßêÎ°ú ÏöîÏïΩÌï¥.\n" +
                    "- Î¨∏Ïû• ÎÅùÏùÄ '~ÏòàÏöî/ÎÑ§Ïöî' ÏúÑÏ£º(ÏßÄÎÇòÏπú Í≤©Ïãù 'ÏûÖÎãàÎã§'Îäî Í∞ÄÍ∏âÏ†Å ÌîºÌï®)\n" +
                    "- Í≤∞Í≥ºÎäî Ïö∞Î¶¨ ÌÖåÏù¥Î∏îÏóê ÏûàÎäî Í∞íÎßå Ïñ∏Í∏â(Ïô∏Î∂Ä ÌîåÎû´Ìèº/Ï∂îÏ†ï ÏàòÏπò Í∏àÏßÄ)\n" +
                    "- ÌïµÏã¨Îßå 1Î¨∏Ïû•: Í∏∞Í∞Ñ¬∑ÏßÄÌëú¬∑Ïà´Ïûê Ï§ëÏã¨\n" +
                    "- Í∏àÏï°Ïóî 'Ïõê' Î∂ôÏù¥Í≥†, Ïà´ÏûêÎäî Ï≤ú Îã®ÏúÑ ÏΩ§Îßà\n" +
                    "- Ìëú/ÏΩîÎìúÎ∏îÎ°ù/Î∂àÌïÑÏöîÌïú ÏÑ§Î™Ö Í∏àÏßÄ, Ïù¥Î™®ÏßÄÎäî ÏµúÎåÄ 1Í∞ú"),
                Map.of("role", "user", "content",
                    "ÏßàÎ¨∏:\n" + question + "\n\nSQL:\n" + sql + "\n\nÍ≤∞Í≥ºÌëú:\n" + table)
            ),
            "temperature", 0.3
        );
        var resp = call(body);
        return extract(resp);
    }

    /* -------------------- AI SQL Ïã§Ìñâ(ÌëúÏ§ÄÌôî ‚Üí Í∞ÄÎìú ‚Üí Ïã§Ìñâ) -------------------- */
    public AiRunResult runAiSqlWithPeriod(String question,
                                          String schemaDoc,
                                          PeriodResolver.ResolvedPeriod period) {
        String aiSqlRaw = generateSql(question, schemaDoc);
        String normalized = SqlNormalizer.enforceDateRangeWhere(aiSqlRaw, true);
        String checked = SqlGuard.ensureSelect(normalized);
        checked = SqlGuard.ensureLimit(checked, 10000);

        Query q = em.createNativeQuery(checked);
        q.setParameter("start", Timestamp.valueOf(period.start()));
        q.setParameter("end",   Timestamp.valueOf(period.end()));

        if (checked.contains(":q")) {
            q.setParameter("q", ""); // ÏÉÅÌíàÎ™ÖÏù¥ ÏóÜÏùÑ Îïê Îπà Î¨∏ÏûêÏó¥ ‚Üí LIKE '%%'
        }

        @SuppressWarnings("unchecked")
        List<Object[]> rows = q.getResultList();

        return new AiRunResult(aiSqlRaw, normalized, checked, rows);
    }


    /* -------------------- Ïú†Ìã∏ -------------------- */
    @SuppressWarnings("unchecked")
    private String extract(Map resp) {
        if (resp == null) return "(ÏùëÎãµ ÏóÜÏùå)";
        if (resp.containsKey("error")) return "(API Ïò§Î•ò) " + resp.get("error");
        try {
            var choices = (List<Map>) resp.get("choices");
            var msg = (Map) choices.get(0).get("message");
            String content = String.valueOf(msg.getOrDefault("content", ""));
            if (content.isBlank()) return "(Îπà ÏùëÎãµ) raw=" + resp;
            return content;
        } catch (Exception e) {
            return "(ÌååÏã± Ïã§Ìå®) raw=" + resp;
        }
    }

    private String stripCodeFence(String s) {
        if (s == null) return null;
        String t = s.trim();
        if (t.startsWith("```")) {
            int firstNl = t.indexOf('\n');
            if (firstNl > 0) t = t.substring(firstNl + 1);
            int lastFence = t.lastIndexOf("```");
            if (lastFence >= 0) t = t.substring(0, lastFence);
        }
        return t.trim();
    }

    /* -------------------- DTO -------------------- */
    public record AiRunResult(
        String aiSqlRaw,
        String normalizedSql,
        String checkedSql,
        List<Object[]> rows
    ) {}

    /* ----- Í¥ÄÎ¶¨ÏûêÍ∞Ä ÏÉÅÌíà Îì±Î°ùÌï†Îïå AIGUIDE ÏÉùÏÑ± ----- */
    public String generateProductDescription(String prompt) {
        var body = Map.of(
            "model", model,
            "messages", List.of(
                Map.of("role", "system", "content",
                    "ÎãπÏã†ÏùÄ Ìñ•Ïàò Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§. ÏÇ¨Ïö©ÏûêÍ∞Ä Ï†úÍ≥µÌïòÎäî Î™®Îì† Ï°∞Í±¥Í≥º ÏöîÍµ¨ÏÇ¨Ìï≠ÏùÑ Ï†ïÌôïÌûà Îî∞Îùº ÏÉÅÌíà ÏÑ§Î™ÖÎ¨∏ÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.\n\n" +
                    "Í∏∞Î≥∏ Í∑úÏπô:\n" +
                    "- Î∞òÎìúÏãú ÏàúÏàò ÌïúÍµ≠Ïñ¥Î°úÎßå ÏûëÏÑ± (Ï§ëÍµ≠Ïñ¥, ÏòÅÏñ¥ Ï†àÎåÄ Í∏àÏßÄ)\n" +
                    "- HTML ÌÉúÍ∑∏ÎÇò ÌäπÏàòÎ¨∏Ïûê ÏÇ¨Ïö© Í∏àÏßÄ\n" +
                    "- ÏûêÏó∞Ïä§ÎüΩÍ≥† ÏôÑÏ†ÑÌïú ÌïúÍµ≠Ïñ¥ Î¨∏Ïû•ÏúºÎ°ú Íµ¨ÏÑ±\n" +
                    "- ÏÇ¨Ïö©ÏûêÏùò Î™®Îì† ÏöîÍµ¨ÏÇ¨Ìï≠ÏùÑ Îπ†ÏßêÏóÜÏù¥ Ìè¨Ìï®\n" +
                    "- Î¨∏Îã® ÏÇ¨Ïù¥ÏóêÎäî Îπà Ï§ÑÎ°ú Íµ¨Î∂Ñ\n" +
                    "- ÎßûÏ∂§Î≤ïÍ≥º ÎùÑÏñ¥Ïì∞Í∏∞ Ï†ïÌôïÌûà Ï§ÄÏàò"),
                Map.of("role", "user", "content", prompt)
            ),
            "temperature", 0.1,
            "max_tokens", 1100
        );

        try {
            var resp = call(body);
            String result = extract(resp);
            if (result == null) return null;

            // Í∏∞Î≥∏ Ìè¨Îß∑ Ï†ïÎ¶¨
            result = result.replace("\r\n", "\n")
                           .replaceAll("[ \t]+", " ")
                           .replaceAll("\n{3,}", "\n\n")
                           .trim();

            // Ï§ëÍµ≠Ïñ¥ ÌïúÏûê Ï†úÍ±∞ + ÌóàÏö© Î¨∏Ïûê ÌôïÏû•(ÏΩúÎ°†, ÏÑ∏ÎØ∏ÏΩúÎ°†, Ïï∞ÌçºÏÉåÎìú, Ïä¨ÎûòÏãú, Ï§ëÏ†ê Îì± Î≥¥Ï°¥)
            result = result.replaceAll("[‰∏Ä-ÈæØ]", "");
            result = result.replaceAll(
                "[^Í∞Ä-Ìû£a-zA-Z0-9\\s\\.,!?()\\-:;/&¬∑‚Äî'\"%\\n]",
                ""
            ).trim();

            // Ïß§Î¶º Î≥¥Ï†ï: "ÏûêÎ•¥ÏßÄ" ÏïäÍ≥† "ÎßàÎ¨¥Î¶¨Îßå Ï∂îÍ∞Ä"
            if (seemsCut(result)) {
                log.warn("AI ÏùëÎãµ ÎßàÎ¨¥Î¶¨ Î≥¥Ï†ï");
                result = finishTail(result);
            }

            // ÏÑπÏÖòÏù¥ ÏóÜÎã§Î©¥ Í∏∞Î≥∏ ÏÑπÏÖò Ï∂îÍ∞Ä(Ïã±Í∏Ä/Î≥µÌï© Ï∂îÏ†ïÏùÄ promptÎ°ú ÌåêÎã®)
            boolean hasGuide = result.contains("ÌôúÏö© Í∞ÄÏù¥Îìú") || result.contains("ÌôúÏö© ÍøÄÌåÅ");
            if (!hasGuide) {
                if (prompt != null && prompt.contains("Ïã±Í∏ÄÎÖ∏Ìä∏:")) {
                    result += "\n\nÌôúÏö© ÍøÄÌåÅ:\n- ÏùºÏÉÅÏóêÏÑú Î∂ÄÎã¥ ÏóÜÏù¥ ÏÇ¨Ïö©ÌïòÍ∏∞ Ï¢ãÏïÑÏöî.\n- Îã§Î•∏ Ìñ•ÏàòÏôÄ Î†àÏù¥Ïñ¥ÎßÅÌïòÍ∏∞ÏóêÎèÑ Ï†ÅÌï©Ìï¥Ïöî.";
                } else {
                    result += "\n\nÌñ•Ïùò ÏãúÍ∞ÑÎ≥Ñ Î≥ÄÌôî & ÌôúÏö© Í∞ÄÏù¥Îìú:\n- ÏãúÍ∞ÑÏóê Îî∞Îùº Îã§ÏñëÌïú Îß§Î†•ÏùÑ ÏÑ†ÏÇ¨ÌïòÎäî Ìñ•ÏûÖÎãàÎã§.\n- ÌïòÎ£® Ï¢ÖÏùº Î≥ÄÌôîÌïòÎäî Ìñ•Ïùò Ïó¨Ï†ïÏùÑ Ï¶êÍ≤®Î≥¥ÏÑ∏Ïöî.";
                }
            }

            return result;
        } catch (Exception e) {
            log.error("ÏÉÅÌíà ÏÑ§Î™ÖÎ¨∏ ÏÉùÏÑ± Ïã§Ìå®: {}", e.getMessage());
            return null;
        }
    }

    /* ----- ÏÉÅÌíà ÏÉÅÏÑ∏ÌéòÏù¥ÏßÄÏóêÏÑú Ïú†Ï†ÄÍ∞Ä AI ÎßûÏ∂§ Í∞ÄÏù¥ÎìúÌï†Îïå ÏÇ¨Ïö© ----- */
    /* ----- ÏÉÅÌíà ÏÉÅÏÑ∏ÌéòÏù¥ÏßÄ: AI ÎßûÏ∂§ Í∞ÄÏù¥Îìú (seemsCut Í±¥ÎìúÎ¶¨ÏßÄ ÏïäÎäî ÏïàÏ†ïÌôî Î≤ÑÏ†Ñ) ----- */
    public String generatePersonaRecommendation(String prompt) {
        final String END_MARK = "<<END>>";

        var body = Map.of(
            "model", model,
            "messages", List.of(
                Map.of("role", "system", "content",
                    "ÎãπÏã†ÏùÄ ÏπúÍ∑ºÌïú Ìñ•Ïàò Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§. ÌäπÏ†ï ÏÑ±Î≥ÑÍ≥º ÎÇòÏù¥ÎåÄÏùò ÏÇ¨ÎûåÏù¥ Ï£ºÏñ¥ÏßÑ Ìñ•ÏàòÎ•º ÏÇ¨Ïö©ÌñàÏùÑ Îïå " +
                    "Ïñ¥Îñ§ Îß§Î†•ÏùÑ Î∞úÏÇ∞Ìï†ÏßÄ Îî∞ÎúªÌïòÍ≤å ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî.\n\n" +
                    "Îã§Ïùå ÎÇ¥Ïö©ÏùÑ 3Í∞ú Î¨∏Îã®ÏúºÎ°ú ÎÇòÎàÑÏñ¥ ÏûêÏó∞Ïä§ÎüΩÍ≥† Î∂ÄÎìúÎü¨Ïö¥ ÎßêÌà¨Î°ú ÏûëÏÑ±ÌïòÏÑ∏Ïöî:\n" +
                    "- Ïù¥ Ìñ•ÏàòÍ∞Ä Ìï¥Îãπ Ïó∞Î†πÎåÄ/ÏÑ±Î≥ÑÍ≥º ÏñºÎßàÎÇò Ïûò Ïñ¥Ïö∏Î¶¨ÎäîÏßÄ\n" +
                    "- Ï£ºÎ≥Ä ÏÇ¨ÎûåÎì§Ïù¥ ÎäêÎÇÑ Ïàò ÏûàÎäî Ï¢ãÏùÄ Ïù∏ÏÉÅÎì§\n" +
                    "- ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏÑ†ÏÇ¨Ìï† ÌäπÎ≥ÑÌïú Î∂ÑÏúÑÍ∏∞\n\n" +
                    "**ÏûëÏÑ± Í∞ÄÏù¥Îìú:**\n" +
                    "- Î∞òÎìúÏãú ÌïúÍµ≠Ïñ¥Îßå ÏÇ¨Ïö©ÌïòÍ≥† ÏûêÏó∞Ïä§Îü¨Ïö¥ ÌëúÌòÑ ÏÇ¨Ïö©\n" +
                    "- ÏπúÍ∑ºÌïòÍ≥† Îî∞ÎúªÌïú ÎßêÌà¨Î°ú ÏûëÏÑ±\n" +
                    "- Í∞Å Î¨∏Îã® ÏÇ¨Ïù¥Ïóê Îπà Ï§ÑÏùÑ ÎÑ£Ïñ¥ Íµ¨Î∂Ñ\n" +
                    "- 'Ï∞©Ïö©Ïûê' ÎåÄÏã† 'ÏÇ¨Ïö©Ïûê'ÎùºÎäî ÌëúÌòÑ ÏÇ¨Ïö©\n" +
                    "- 150-200Ïûê ÎÇ¥Ïô∏Î°ú ÏûëÏÑ±\n" +
                    "- ÎßàÏßÄÎßâ Ï§ÑÏóê Ï†ïÌôïÌûà " + END_MARK + " Î•º Î∂ôÏó¨ÏÑú Í∏ÄÏù¥ ÎÅùÎÇ¨ÏùåÏùÑ ÌëúÏãúÌïòÏÑ∏Ïöî."),
                Map.of("role", "user", "content", prompt)
            ),
            "temperature", 0.6,
            "max_tokens", 800 // Ïó¨Ïú† ÎÑâÎÑâÌûà
        );

        try {
            var resp = call(body);
            String result = extract(resp);
            if (result == null) return null;

            result = normalizeTextKeep(result);
            boolean hasEnd = hasEndMarker(result, END_MARK);
            if (!hasEnd && isFinishByLength(resp)) {
                // 1Ìöå Ïù¥Ïñ¥Ïì∞Í∏∞: Í∏∞Ï°¥ ÌÖçÏä§Ìä∏Î•º ÏàòÏ†ïÌïòÏßÄ ÎßêÍ≥† END_MARKÍπåÏßÄ ÎßàÎ¨¥Î¶¨
                String cont = continueToEndMarker(result, END_MARK);
                if (cont != null && !cont.isBlank()) {
                    result = mergeTail(result, cont);
                }
                hasEnd = hasEndMarker(result, END_MARK);
            }

            // END ÎßàÏª§ Ï†úÍ±∞
            result = stripEndMarker(result, END_MARK);

            // Í∑∏ÎûòÎèÑ ÎÑàÎ¨¥ Î∂àÏïàÌïòÎ©¥(Ï¥àÎã®Î¨∏ Îì±) Í∏∞Ï°¥ seemsCutÎ°ú Î≥¥Ï°∞Îßå ÏàòÌñâ
            if (seemsCut(result)) {
                result = safeFinishTail(result);
            }
            return result;

        } catch (Exception e) {
            log.error("ÏÉÅÌíà ÏÑ§Î™ÖÎ¨∏ ÏÉùÏÑ± Ïã§Ìå®: {}", e.getMessage());
            return null;
        }
    }

    /* ===== Î≥¥Ï°∞ Ïú†Ìã∏ (ÏÉàÎ°ú Ï∂îÍ∞Ä) ===== */
    private boolean hasEndMarker(String s, String end) {
        if (s == null) return false;
        return s.trim().endsWith(end);
    }
    private String stripEndMarker(String s, String end) {
        if (s == null) return null;
        String t = s.trim();
        if (t.endsWith(end)) t = t.substring(0, t.length() - end.length()).trim();
        return t;
    }
    /** Ïù¥Ïñ¥Ïì∞Í∏∞: Î≥∏Î¨∏ÏùÄ ÏàòÏ†ïÌïòÏßÄ ÎßêÍ≥† END_MARKÍπåÏßÄ 1~2Î¨∏Ïû•ÏúºÎ°ú ÎßàÎ¨¥Î¶¨ */
    private String continueToEndMarker(String partial, String END_MARK) {
        try {
            var body = Map.of(
                "model", model,
                "messages", List.of(
                    Map.of("role", "system", "content",
                        "ÏïÑÎûò Í∏ÄÏùÑ ÏàòÏ†ïÌïòÏßÄ ÎßêÍ≥†, ÏûêÏó∞Ïä§ÎüΩÍ≤å ÎßàÎ¨¥Î¶¨ Î¨∏Ïû• 1~2Í∞úÎßå Ïù¥Ïñ¥ÏÑú ÏûëÏÑ±ÌïòÏÑ∏Ïöî. " +
                        "Î∞òÎìúÏãú ÎßàÏßÄÎßâÏóê " + END_MARK + " Î•º Î∂ôÏù¥ÏÑ∏Ïöî."),
                    Map.of("role", "user", "content", partial + "\n\n[ÎßàÎ¨¥Î¶¨Îßå Ïù¥Ïñ¥Ïì∞Í∏∞]")
                ),
                "temperature", 0.3,
                "max_tokens", 160
            );
            var resp = call(body);
            String tail = extract(resp);
            if (tail == null) return null;
            return normalizeTextKeep(tail);
        } catch (Exception e) {
            log.warn("Ïù¥Ïñ¥Ïì∞Í∏∞ Ïã§Ìå®: {}", e.getMessage());
            return null;
        }
    }

    /** ÌÖçÏä§Ìä∏ Ï†ïÎ¶¨: Î∂àÌïÑÏöî Í∞úÌñâ/Ïä§ÌéòÏù¥Ïä§Îßå Ï†ïÎèà(ÎßàÏª§Îäî Î≥¥Ï°¥) */
    private String normalizeTextKeep(String s) {
        if (s == null) return null;
        return s.replace("\r\n", "\n")
                .replaceAll("[\\t\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F]+", " ")
                .replaceAll(" +", " ")
                .replaceAll("\\n{3,}", "\n\n")
                .trim();
    }

    /** ÏµúÏ¢Ö ÏïàÏ†Ñ ÎßàÍ∞ê: seemsCut Ïú†ÏßÄÌïòÎ©¥ÏÑúÎèÑ Í≥ºÎèÑÌïú ÏàòÏ†ï ÏóÜÏù¥ 1Î¨∏Ïû• Ï∂îÍ∞Ä */
    private String safeFinishTail(String cutText) {
        if (cutText == null || cutText.isBlank()) return null;
        int lastPeriod = Math.max(cutText.lastIndexOf('.'), cutText.lastIndexOf('„ÄÇ'));
        if (lastPeriod > 0 && cutText.length() - lastPeriod < 80) return cutText.trim();
        return (cutText.trim() + " ÎßàÏßÄÎßâÏúºÎ°ú, Ïù¥ Ìñ•ÏàòÎäî ÏùºÏÉÅÍ≥º ÌäπÎ≥ÑÌïú ÏàúÍ∞Ñ Î™®ÎëêÏóêÏÑú ÏÇ¨Ïö©ÏûêÏùò ÌíàÍ≤©ÏùÑ ÌïúÏ∏µ ÎèãÎ≥¥Ïù¥Í≤å Ìï¥Ï§çÎãàÎã§.").trim();
    }

    /** call() ÏùëÎãµ Íµ¨Ï°∞Ïóê ÎßûÍ≤å finish_reasonÏù¥ lengthÏù∏ÏßÄ ÌôïÏù∏ÌïòÎèÑÎ°ù Íµ¨ÌòÑ */
    @SuppressWarnings("unchecked")
    private boolean isFinishByLength(Object resp) {
        try {
            if (!(resp instanceof Map)) return false;
            Map<String, Object> map = (Map<String, Object>) resp;
            List<Map<String, Object>> choices = (List<Map<String, Object>>) map.get("choices");
            if (choices == null || choices.isEmpty()) return false;

            Map<String, Object> choice0 = choices.get(0);
            Object fr = choice0.get("finish_reason");
            String reason = (fr == null) ? "" : String.valueOf(fr);

            // (ÏÑ†ÌÉù) ÎîîÎ≤ÑÍπÖÏóê ÎèÑÏõÄ
            Object usage = map.get("usage");
            log.debug("AI finish_reason={}, usage={}", reason, usage);

            return "length".equalsIgnoreCase(reason);
        } catch (Exception ignore) {
            return false;
        }
    }
    

    /** Í∏∞Ï°¥ mergeTail Ïû¨ÏÇ¨Ïö© (Î≥∏Î¨∏ + Ïù¥Ïñ¥Ïì∞Í∏∞ Ìï©ÏπòÍ∏∞) */
    private String mergeTail(String base, String tail) {
        if (tail == null || tail.isBlank()) return base;
        if (tail.startsWith(base)) tail = tail.substring(base.length()).trim();
        if (tail.isBlank()) return base;
        String sep = base.endsWith("\n") ? "" : "\n";
        return (base + sep + tail).trim();
    }
    // ÌÖçÏä§Ìä∏Í∞Ä Î¨∏Ïû• Ï§ëÍ∞ÑÏóêÏÑú ÎÅùÎÇ¨ÎäîÏßÄ Í∞ÑÎã® Ï†êÍ≤Ä(ÏôÑÌôî Î≤ÑÏ†Ñ)
    private boolean seemsCut(String text) {
        if (text == null) return true;
        String t = text.trim();
        if (t.isEmpty()) return true;

        // Î¨∏Ïû• Ï¢ÖÎ£å Í∏∞Ìò∏Îì§: . ? ! Í∑∏Î¶¨Í≥† "Îã§." "Ïöî."
        boolean endsWithSentence =
            t.endsWith(".") || t.endsWith("?") || t.endsWith("!")
            || t.endsWith("Îã§.") || t.endsWith("Ïöî.");

        // ÎÑàÎ¨¥ ÏßßÏùÑ ÎïåÎßå Î≥¥ÏàòÏ†ÅÏúºÎ°ú (Ïòà: 80Ïûê ÎØ∏Îßå)
        boolean suspiciouslyShort = t.length() < 80;

        // "Ïß§Î¶º"ÏùÄ Ï†ïÎßê Î™ÖÎ∞±Ìï† ÎïåÎßå true
        return !endsWithSentence && suspiciouslyShort;
    }

    // ÎÅäÍ∏¥ Í≤ΩÏö∞, "ÏûòÎùºÎÇ¥ÏßÄ ÏïäÍ≥†" ÏûêÏó∞Ïä§ÎüΩÍ≤å ÎÅùÎß∫Îäî Íº¨Î¶¨Îßå Ï∂îÍ∞Ä
    private String finishTail(String cutText) {
        if (cutText == null || cutText.isBlank()) return null;

        // Îí§Ï™ΩÏóê ÎßàÏπ®ÌëúÍ∞Ä Í∞ÄÍπùÍ≤å ÏûàÏúºÎ©¥ Í∑∏ÎåÄÎ°ú Îë†
        int lastPeriod = cutText.lastIndexOf('.');
        if (lastPeriod > 0 && cutText.length() - lastPeriod < 120) {
            return cutText;
        }

        // ÏûêÏó∞Ïä§Îü¨Ïö¥ Íº¨Î¶¨Îßå Ï∂îÍ∞Ä
        return cutText + "\n\nÌñ•Ïùò ÏãúÍ∞ÑÎ≥Ñ Î≥ÄÌôî & ÌôúÏö© Í∞ÄÏù¥Îìú:\n- ÏûêÏÑ∏Ìïú ÌôúÏö©Î≤ïÏùÄ ÏÉÅÌíà ÏÉÅÏÑ∏Ï†ïÎ≥¥Î•º Ï∞∏Í≥†Ìï¥Ï£ºÏÑ∏Ïöî.";
    }
}
