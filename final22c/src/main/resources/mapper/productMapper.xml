<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ex.final22c.repository.productMapper.ProductMapper">

  <!-- =========================================================
       공통 WHERE (필터 + 키워드) *Oracle 전용*
     ========================================================= -->
  <sql id="WhereProductFilters">
    WHERE 1=1
      <if test="brandIds != null and brandIds.size() > 0">
        AND p.BRAND_BRANDNO IN
        <foreach collection="brandIds" item="v" open="(" close=")" separator=",">
          #{v}
        </foreach>
      </if>

      <if test="gradeIds != null and gradeIds.size() > 0">
        AND p.GRADE_GRADENO IN
        <foreach collection="gradeIds" item="v" open="(" close=")" separator=",">
          #{v}
        </foreach>
      </if>

      <if test="mainNoteIds != null and mainNoteIds.size() > 0">
        AND p.MAINNOTE_MAINNOTENO IN
        <foreach collection="mainNoteIds" item="v" open="(" close=")" separator=",">
          #{v}
        </foreach>
      </if>

      <if test="volumeIds != null and volumeIds.size() > 0">
        AND p.VOLUME_VOLUMENO IN
        <foreach collection="volumeIds" item="v" open="(" close=")" separator=",">
          #{v}
        </foreach>
      </if>

      <if test="keyword != null and keyword != ''">
        AND INSTR(LOWER(p.NAME), LOWER(#{keyword})) > 0
      </if>
  </sql>

  <!-- =========================================================
       옵션(필터 목록) : 브랜드 / 그레이드 / 메인노트 / 용량
       - 반환 컬럼 키: id, name, count (소문자 고정)
     ========================================================= -->
  <select id="selectBrandOptions" resultType="map">
    SELECT
      b.BRANDNO     AS "id",
      b.BRANDNAME   AS "name",
      COUNT(p.ID)   AS "count"
    FROM BRAND b
    LEFT JOIN PRODUCT p ON p.BRAND_BRANDNO = b.BRANDNO
    GROUP BY b.BRANDNO, b.BRANDNAME
    ORDER BY b.BRANDNAME
  </select>

  <select id="selectGradeOptions" resultType="map">
    SELECT
      g.GRADENO     AS "id",
      g.GRADENAME   AS "name",
      COUNT(p.ID)   AS "count"
    FROM GRADE g
    LEFT JOIN PRODUCT p ON p.GRADE_GRADENO = g.GRADENO
    GROUP BY g.GRADENO, g.GRADENAME
    ORDER BY g.GRADENAME
  </select>

  <select id="selectMainNoteOptions" resultType="map">
    SELECT
      m.MAINNOTENO    AS "id",
      m.MAINNOTENAME  AS "name",
      COUNT(p.ID)     AS "count"
    FROM MAINNOTE m
    LEFT JOIN PRODUCT p ON p.MAINNOTE_MAINNOTENO = m.MAINNOTENO
    GROUP BY m.MAINNOTENO, m.MAINNOTENAME
    ORDER BY m.MAINNOTENAME
  </select>

  <select id="selectVolumeOptions" resultType="map">
    SELECT
      v.VOLUMENO     AS "id",
      v.VOLUMENAME   AS "name",
      COUNT(p.ID)    AS "count"
    FROM VOLUME v
    LEFT JOIN PRODUCT p ON p.VOLUME_VOLUMENO = v.VOLUMENO
    GROUP BY v.VOLUMENO, v.VOLUMENAME
    ORDER BY v.VOLUMENAME
  </select>

  <!-- =========================================================
       카운트(필터 + 키워드 공통)
     ========================================================= -->
  <select id="countProducts" resultType="long">
    SELECT COUNT(1)
    FROM PRODUCT p
    <include refid="WhereProductFilters"/>
  </select>

  <!-- =========================================================
       기본 목록(정렬/페이징 없음)
       - 템플릿 키와 동일: id, name, imgUrl, brandName, price, sellPrice, discount
     ========================================================= -->
  <select id="selectProducts" resultType="map">
    SELECT
      p.ID                                   AS "id",
      p.NAME                                 AS "name",
      NVL(p.IMGPATH,'') || NVL(p.IMGNAME,'') AS "imgUrl",
      b.BRANDNAME                            AS "brandName",
      p.PRICE                                AS "price",
      p.SELLPRICE                            AS "sellPrice",
      p.DISCOUNT                             AS "discount"
    FROM PRODUCT p
    LEFT JOIN BRAND b ON b.BRANDNO = p.BRAND_BRANDNO
    <include refid="WhereProductFilters"/>
    ORDER BY p.ID DESC
  </select>

  <!-- =========================================================
       리스트 전용: 정렬 + 페이징 (Oracle)
       - sort : id | popular | priceAsc | priceDesc | reviewDesc
       - offset, limit 사용
     ========================================================= -->
  <select id="selectProductsPaged" resultType="map">
    <bind name="startRow" value="offset + 1"/>
    <bind name="endRow"   value="offset + limit"/>

    WITH sales AS (
      /* 판매량(확정수량 합계) */
      SELECT od.ID AS pid, SUM(od.CONFIRMQUANTITY) AS qty
      FROM ORDERDETAIL od
      JOIN ORDERS o ON o.ORDERID = od.ORDERID
      WHERE o.STATUS IN ('PAID','CONFIRMED','REFUNDED')
      GROUP BY od.ID
    ),
    rcnt AS (
      /* 리뷰 개수 */
      SELECT r.PRODUCT_ID AS pid, COUNT(1) AS cnt
      FROM REVIEW r
      GROUP BY r.PRODUCT_ID
    ),
    base AS (
      SELECT
        p.ID                                   AS "id",
        p.NAME                                 AS "name",
        NVL(p.IMGPATH,'') || NVL(p.IMGNAME,'') AS "imgUrl",
        b.BRANDNAME                            AS "brandName",
        p.PRICE                                AS "price",
        p.SELLPRICE                            AS "sellPrice",
        p.DISCOUNT                             AS "discount",
        NVL(s.qty, 0)                          AS "sales",
        NVL(r.cnt, 0)                          AS "reviewCnt"
      FROM PRODUCT p
      LEFT JOIN BRAND b ON b.BRANDNO = p.BRAND_BRANDNO
      LEFT JOIN sales s ON s.pid = p.ID
      LEFT JOIN rcnt  r ON r.pid = p.ID
      <include refid="WhereProductFilters"/>
    ),
    ranked AS (
      SELECT
        b.*,
        ROW_NUMBER() OVER(
          <choose>
            <when test="sort == 'popular'">
              ORDER BY b."sales" DESC, b."id" DESC
            </when>
            <when test="sort == 'priceAsc'">
              ORDER BY b."sellPrice" ASC, b."id" DESC
            </when>
            <when test="sort == 'priceDesc'">
              ORDER BY b."sellPrice" DESC, b."id" DESC
            </when>
            <when test="sort == 'reviewDesc'">
              ORDER BY b."reviewCnt" DESC, b."id" DESC
            </when>
            <otherwise>
              ORDER BY b."id" DESC
            </otherwise>
          </choose>
        ) AS rn
      FROM base b
    )
    SELECT
      "id","name","imgUrl","brandName","price","sellPrice","discount"
    FROM ranked
    WHERE rn BETWEEN #{startRow} AND #{endRow}
    ORDER BY rn
  </select>

  <!-- =========================================================
       브랜드 목록/상세
     ========================================================= -->
  <select id="selectBrands" resultType="map">
    SELECT
      b.BRANDNO                              AS "id",
      b.BRANDNAME                            AS "name",
      NVL(b.IMGPATH,'') || NVL(b.IMGNAME,'') AS "imgUrl"
    FROM BRAND b
    ORDER BY b.BRANDNAME
  </select>

  <select id="selectBrandById" parameterType="long" resultType="map">
    SELECT
      b.BRANDNO                              AS "id",
      b.BRANDNAME                            AS "name",
      NVL(b.IMGPATH,'') || NVL(b.IMGNAME,'') AS "imgUrl"
    FROM BRAND b
    WHERE b.BRANDNO = #{brandNo}
  </select>
  
  
	<!-- 브랜드명과 상품명으로 상품 검색 -->
	<select id="findByBrandAndName" resultType="map">
	    SELECT 
	        p.ID as "productId",
	        p.NAME as "name",
	        b.BRANDNAME as "brandName"
	    FROM PRODUCT p
	    LEFT JOIN BRAND b ON p.BRAND_BRANDNO = b.BRANDNO
	    WHERE 1=1
	        <if test="brandName != null and brandName != ''">
	            AND LOWER(b.BRANDNAME) LIKE LOWER(CONCAT('%', #{brandName}, '%'))
	        </if>
	        <if test="productName != null and productName != ''">
	            AND LOWER(p.NAME) LIKE LOWER(CONCAT('%', #{productName}, '%'))
	        </if>
	    ORDER BY p.ID DESC
	</select>
	
	<!-- 상품명으로 상품 검색 (부분 일치) -->
	<select id="findByProductName" resultType="map">
	    SELECT 
	        p.ID as "productId",
	        p.NAME as "name",
	        b.BRANDNAME as "brandName"
	    FROM PRODUCT p
	    LEFT JOIN BRAND b ON p.BRAND_BRANDNO = b.BRANDNO
	    WHERE 1=1
	        <if test="productName != null and productName != ''">
	            AND LOWER(p.NAME) LIKE LOWER(CONCAT('%', #{productName}, '%'))
	        </if>
	    ORDER BY p.ID DESC
	    FETCH FIRST 10 ROWS ONLY
	</select>
	
	<!-- 추천 시스템필터링  -->
	<select id="selectProductsForRecommendation" resultType="map">
	  SELECT
	    p.ID                                   AS "id",
	    p.NAME                                 AS "name",
	    b.BRANDNAME                            AS "brandName",
	    p.SELLPRICE                            AS "sellPrice",
	    p.COUNT                                AS "count",
	    g.GRADENAME                            AS "gradeName",
	    m.MAINNOTENAME                         AS "mainNoteName",
	    NVL(gs.sales_qty, 0)                   AS "genderSales"
	  FROM PRODUCT p
	  LEFT JOIN BRAND b ON b.BRANDNO = p.BRAND_BRANDNO
	  LEFT JOIN GRADE g ON g.GRADENO = p.GRADE_GRADENO
	  LEFT JOIN MAINNOTE m ON m.MAINNOTENO = p.MAINNOTE_MAINNOTENO
	  LEFT JOIN (
	    SELECT 
	      od.ID AS product_id, 
	      SUM(od.CONFIRMQUANTITY) AS sales_qty
	    FROM ORDERDETAIL od
	    JOIN ORDERS o ON o.ORDERID = od.ORDERID
	    JOIN USERS u ON u.USERNO = o.USERNO
	    WHERE o.STATUS IN ('CONFIRMED', 'REFUNDED')
	      AND UPPER(u.GENDER) = UPPER(#{gender})
	    GROUP BY od.ID
	  ) gs ON gs.product_id = p.ID
	  WHERE 1=1
	
	  <!-- 나머지 필터 조건들은 그대로 유지 -->
	  <if test="brandIds != null and brandIds.size() > 0">
	    AND p.BRAND_BRANDNO IN
	    <foreach collection="brandIds" item="v" open="(" close=")" separator=",">
	      #{v}
	    </foreach>
	  </if>
	
	  <if test="gradeIds != null and gradeIds.size() > 0">
	    AND p.GRADE_GRADENO IN
	    <foreach collection="gradeIds" item="v" open="(" close=")" separator=",">
	      #{v}
	    </foreach>
	  </if>
	
	  <if test="mainNoteIds != null and mainNoteIds.size() > 0">
	    AND p.MAINNOTE_MAINNOTENO IN
	    <foreach collection="mainNoteIds" item="v" open="(" close=")" separator=",">
	      #{v}
	    </foreach>
	  </if>
	
	  <if test="volumeIds != null and volumeIds.size() > 0">
	    AND p.VOLUME_VOLUMENO IN
	    <foreach collection="volumeIds" item="v" open="(" close=")" separator=",">
	      #{v}
	    </foreach>
	  </if>
	
	  <if test="keyword != null and keyword != ''">
	    AND INSTR(LOWER(p.NAME), LOWER(#{keyword})) > 0
	  </if>
	
	  <if test="priceRange != null and priceRange != ''">
	    <choose>
	      <when test="priceRange == 'low'">
	        AND p.SELLPRICE &lt;= 100000
	      </when>
	      <when test="priceRange == 'mid'">
	        AND p.SELLPRICE BETWEEN 100001 AND 300000
	      </when>
	      <when test="priceRange == 'high'">
	        AND p.SELLPRICE &gt;= 300001
	      </when>
	    </choose>
	  </if>
	
	  ORDER BY NVL(gs.sales_qty, 0) DESC, p.ID DESC
	</select>


</mapper>
